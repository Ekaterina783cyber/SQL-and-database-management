---1. Выведите название самолетов, которые имеют менее 50 посадочных мест.

select model
from aircrafts a 
left join seats s on a.aircraft_code = s.aircraft_code 
group by a.aircraft_code, a.model 
having count(seat_no)<50


----2. Выведите процентное изменение ежемесячной суммы бронирования билетов, округленной до сотых

select date_trunc('month', book_date::date) as "Месяц", 
sum(total_amount) as "Сумма бронирования билетов",
round((sum(total_amount) - lag (sum(total_amount)) over (order by date_trunc('month',book_date::date)))/lag (sum(total_amount)) over (order by date_trunc('month',book_date::date))*100,2)
from bookings b 
group by date_trunc('month', book_date::date)


--3. Выведите названия самолетов не имеющих бизнес - класс. Решение должно быть через функцию array_agg.


select a.model
from aircrafts a 
join seats s on a.aircraft_code = s.aircraft_code 
group by s.aircraft_code, a.aircraft_code, a.model    
having array_position(array_agg(fare_conditions), 'Business') is null


--4. Вывести накопительный итог количества мест в самолетах по каждому аэропорту на
--каждый день, учитывая только те самолеты, которые летали пустыми и только те дни, где
--из одного аэропорта таких самолетов вылетало более одного.
 --В результате должны быть код аэропорта, дата, количество пустых мест в самолете и
---накопительный итог.

with cte as (
     select f.flight_id, 
     f.departure_airport, f.actual_departure::date, 
     f.status, 
     f.aircraft_code, 
     count(bp.flight_id),
     count (f.flight_id) over (partition by date_trunc('day', f.actual_departure::date), f.departure_airport order by f.departure_airport) count_flights
     from flights f 
     left join boarding_passes bp on f.flight_id = bp.flight_id
     where f.status in ('Arrived', 'Departed')
     group by f.flight_id, bp.flight_id
     having count(bp.flight_id) = 0),
cte2 as (
     select s.aircraft_code, 
     count(s.seat_no) count_seats
     from seats s
     group by s.aircraft_code)          
select cte.departure_airport, cte.actual_departure::date,
cte2.count_seats,
sum (cte2.count_seats) over (partition by cte.departure_airport, cte.actual_departure::date order by cte.flight_id)
from cte
join cte2 on cte.aircraft_code = cte2.aircraft_code
where count_flights > 1

--5. Найдите процентное соотношение перелетов по маршрутам от общего количества
--перелетов.
 --Выведите в результат названия аэропортов и процентное отношение.
 --Решение должно быть через оконную функцию.

select a.airport_name , a2.airport_name,
round (count(*)/sum(count(*)) over ()*100,2) as "Процентное соотношение"
from flights f 
join airports a on a.airport_code = f.departure_airport 
join airports a2 on a2.airport_code = f.arrival_airport 
group by a.airport_code, a2.airport_code
order by a.airport_code, a2.airport_code

--6. Выведите количество пассажиров по каждому коду сотового оператора, если учесть, что
--код оператора - это три символа после +7

select count(passenger_id) as "Количество пассажиров",
substring(contact_data ->> 'phone'from 3 for 3) as "Код оператора"
from tickets t 
group by substring(contact_data ->> 'phone'from 3 for 3)

--7. Классифицируйте финансовые обороты (сумма стоимости перелетов) по маршрутам:
 --До 50 млн - low
 --От 50 млн включительно до 150 млн - middle
 --От 150 млн включительно - high
 --Выведите в результат количество маршрутов в каждом полученном классе
select amount, count(*)
from(
     select
     case 
     	when sum(tf.amount)<50000000 then 'low'
     	when sum(tf.amount)>=50000000 and sum(tf.amount)<150000000 then 'middle'
     	else 'high'
     end amount
     from flights f 
join ticket_flights tf on f.flight_id = tf.flight_id 
group by f.flight_no) t
group by amount

--8. Вычислите медиану стоимости перелетов, медиану размера бронирования и отношение медианы бронирования к медиане стоимости перелетов, округленной до сотых
Верно
	
select mediana_amount, mediana_total_amount,
round((b.mediana_total_amount /tf.mediana_amount)::numeric, 2)
from
(select percentile_cont(0.5) within group (order by amount) as mediana_amount
from ticket_flights) tf, 
(select percentile_cont(0.5) within group (order by total_amount) as mediana_total_amount 
from bookings) b 
	
--9. Найдите значение минимальной стоимости полета 1 км для пассажиров. То есть нужно найти расстояние между аэропортами и с учетом стоимости перелетов получить искомый результат
--  Для поиска расстояния между двумя точками на поверхности Земли используется модуль earthdistance.
--  Для работы модуля earthdistance необходимо предварительно установить модуль cube.
--  Установка модулей происходит через команду: create extension название_модуля.

create extension cube
create extension earthdistance

select min(amount/(earth_distance(ll_to_earth(a.latitude,a.longitude), ll_to_earth(a2.latitude, a2.longitude)) / 1000.0)) as "Мин стоимость полета 1 км"
from flights f
join airports a on f.departure_airport = a.airport_code
join airports a2 on f.arrival_airport = a2.airport_code
join ticket_flights tf on f.flight_id = tf.flight_id

	
